'''
最大路径和 I
从如下的数字三角形的顶端出发，不断移动到下一行与其相邻的元素，所能得到的最大路径
和是23。
3
7 4
2 4 6
8 5 9 3
如上图，最大路径和为3+7+4+9=23。
从如下的数字三角形顶端出发到达底部，求所能得到的最大路径和。
75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
注意:在这个问题中，由于只有16384条路径，通过穷举所有的路径来解决问题是可行的。
但是，对于第67题，虽然是一道相同类型的题目，但是其中的数字三角形将拥有一百行，
就不再能够通过暴力破解来解决，而需要一个更加聪明的办法！;o)
'''

# 从第2行开始，到达某一行的某个数字的最大路径和等于他的两个根节点的最大路径和中
# 大的那一个加上他自己（动态规划）
# f[i][j] = max(f[i-1][j], f[i-1][j-1])+n[i][j]

def pathSum(filename):
    # 这部分用于把文件中的数字三角形按行分别存在二维数组n内
    file = open(filename)
    n = []
    print("文件名为：", file.name)
    for line in file.readlines():
        line = line.strip("\n")
        n.append(line.split(" "))
    file.close()
    # 创建存放每个数最大路径和的二维数组
    f = [[0 for j in range(len(n[i]))] for i in range(len(n))]

    # 开始计算
    f[0][0] = int(n[0][0])
    for i in range(1, len(f)):
        for j in range(len(f[i])):
            if j == 0:
                f[i][j]= f[i - 1][j] + int(n[i][j])
            elif j == len(f[i]) - 1:
                f[i][j]= f[i - 1][j - 1] + int(n[i][j])
            else:
                f[i][j] = max(f[i - 1][j], f[i - 1][j - 1]) + int(n[i][j])
    # 打印最后一行数字的最大值即可
    print(max(f[-1]))

pathSum("p018_triangle.txt")
pathSum("p067_triangle.txt")

