'''
硬币求和
英国的货币单位分英镑£和便士p，目前流通的硬币一共有八种面值：
1p,2p,5p,10p,20p,50p,£1(100p),£2(200p)
想要凑出£2，其中一种做法是：
1*£1+1*50p+2*20p+1*5p+1*2p+3*1p
不限制硬币数量，凑出£2有多少种不同的做法？
'''
# 数字凑200,懒得思考了
# 定义abcdefgh分别代表使用的八种面值硬币数量，套8个for作检查
# 循环次数大的放在内层，能提高性能


# 还是决定看一下动态规划
# 参考文章https://cloud.tencent.com/developer/article/1794349

'''
利用dp[i][j]代表使用前i种硬币凑成总额j的组合数（二维数组的解法）

那么有dp[i][j]=dp[i-1][j]+dp[i-1][j-coins[i]]+dp[i-1][j-2*coins[i]]+...\
+dp[i-1][j-k*coins[i]],其中k=j/coins[i]

上面的意思是，dp[i][j]可以转为求前i-1种硬币凑成j、j-coins[i]、j-2*coins[i]...的
方法数总和
减去coins[i]的值则意为使用了n个第i种货币（n=0,1,2,3....,k)

如此迭代下去，即可得出答案

边界条件为d[0][j]=0,d[i][0]=1
'''

'''
利用一维数组进行动态规划的求解
dp[j]代表凑成j的货币组合总数(考虑coins[i]的组合）

那么dp[j]就是所有的dp[j-coins[i]]（不考虑coins[i]）累加
当然这里i=0,1,2,3....,len(coins[])

上面累加的意思就是对于任一种硬币，只考虑使用一个coins[i]，求出dp[j-coins[i]]总数
这里可能会有疑问，如果用2个或更多coins[i]的情况，怎么办

需要明白的是，使用2个以及更多的coins[i]的组合其实已经包含在了dp[j-coins[i]]的
递推公式内

所以递推公式即为：dp[j] += dp[j-coins[i]]

同样边界条件限制为dp[0]=1，因为凑成0的方法只有1种，不放硬币。
'''

dp=[1]+[0]*200
coins=[1,2,5,10,20,50,100,200]

for i in coins:
    for j in range(i, 201):
            dp[j] += dp[j - i]

print(dp[200])

'''
这里需要注意for循环的先后顺序，如果把j放在外层先循环，答案就会错误（如下的代码）
理由是：
    假设只有两种货币，面值1和2，求j=3
    
    当i在外层循环时，每种硬币每次遍历，在d[j]的方案数内，永远都是按照2、1这样的
顺序排列的，固定不变，所以最后求出的d[j]就是硬币“组合”的数量

    i = 1,dp[1]--->(1)这里的1是dp[1-1]预先使用掉的1
          dp[2]--->(1,1)这里前面的1就是dp[2-1]预先使用掉的1；其他同理后面不赘述
          dp[3]--->(1,1,1)这里后面的两个1就是dp[2]的(1,1)

    i = 2,dp[2]--->(1,1),(2)
          dp[3]--->(1,1,1),(2,1),最后这个1是dp[1]方案中的1

    而当j在外层循环时，每次遍历，d[j]的方案数内，除了按照2,1的顺序排列，还会按照
1,2的顺序排列，最终求出的d[j]其实是硬币“排列”的数量

    j = 1,i = 1,dp[1]--->(1)
    j = 2,i = 1,dp[2]--->(1,1)
          i = 2,dp[2]--->(1,1)(2)
    j = 3,i = 1,dp[3]--->(1,1,1)(1,2)这里的(1,2)就是在dp[3-1]的时候先使用1，再连接
                                     dp[2]的组合时出现的
          i = 2,dp[3]--->(1,1,1)(1,2)(2,1)

'''

'''
for j in range(1, 201):
    for i in coins:
        if j >= i:
            d[j] += d[j - i]
            print(d)
print(d[200])
'''
